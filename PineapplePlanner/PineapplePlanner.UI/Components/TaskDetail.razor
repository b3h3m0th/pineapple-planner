@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using PineapplePlanner.Application.Interfaces
@using PineapplePlanner.UI.Providers
@using PineapplePlanner.UI.Services

@inject ITaskRepository _taskRepository
@inject FirebaseAuthenticationService _authenticationService
@inject AuthenticationStateProvider _authStateProvider

@if (false)
{
    <div class="task-detail">
        <MudIcon Icon=@Icons.Material.Rounded.Close Title="Close" @onclick=@HandleClose /><br />
        <label for="name">Name</label>
        <input @bind-value=@Task.Name id="name" name="name" /><br />
        <label for="description">Description</label>
        <textarea @bind=@Task.Description @bind:event="onchange" id="description" name="description">@Task.Description</textarea><br />
        <label for="description">Due</label>
        <input type="date" @bind-value=@Task.DateDue id="due" name="due" /><br />
        <label for="priority">Priority</label>
        <InputSelect @bind-value=@Task.Priority name="priority" id="priority">
            @foreach (Domain.Enums.Priority priority in Enum.GetValues(typeof(Domain.Enums.Priority)).Cast<Domain.Enums.Priority>())
            {
                <option value=@priority>@priority</option>
            }
        </InputSelect><br />
        <label for="completed">Completed</label>
        <input type="checkbox" @bind=@IsCompleted id="completed" name="completed" /><br />
        <button @onclick=@HandleSave>Save</button><br />
        @if (!string.IsNullOrEmpty(Task.Id))
        {
            <button @onclick=@HandleDelete>Delete</button>
        }
    </div>
}

@if (IsOpen)
{
    <MudPaper Class="task-detail p-4" Elevation="25">
        <div class="task-header">
            <MudIconButton Icon=@Icons.Material.Rounded.Close OnClick=@HandleClose Color=@Color.Surface />
        </div>
        <MudForm Class="p-4">
            <MudTextField Label="Name" @bind-Value="Task.Name" Variant=@Variant.Outlined Color=@Color.Surface Margin=@Margin.Dense />
            <MudTextField T="string" Label="Description" @bind-Value="Task.Description" Variant="@Variant.Outlined" FullWidth="true" Lines="4" Margin=@Margin.Dense />
            <MudDatePicker Label="Due Date" @bind-Date=@Task.DateDue Variant=@Variant.Outlined Margin=@Margin.Dense></MudDatePicker>
            <MudSelect T=@(Domain.Enums.Priority?) @bind-Value="Task.Priority" Label="Priority" Variant=@Variant.Outlined FullWidth="true" Margin=@Margin.Dense>
                @foreach (Domain.Enums.Priority priority in Enum.GetValues(typeof(Domain.Enums.Priority)).Cast<Domain.Enums.Priority>())
                {
                    <MudSelectItem T=@(Domain.Enums.Priority?) Value=@priority>@priority</MudSelectItem>
                }
            </MudSelect>
            <MudCheckBox @bind-Value="IsCompleted" Label="Completed" Color=@Color.Surface T="bool" Margin=@Margin.Dense/>
            <div class="task-actions">
                <MudButton OnClick=@HandleSave Color=@Color.Surface Variant=@Variant.Outlined>Save</MudButton>

                @if (!string.IsNullOrEmpty(Task.Id))
                {
                    <MudButton OnClick=@HandleDelete Color=@Color.Error Variant=@Variant.Outlined>Delete</MudButton>
                }
            </div>
        </MudForm>
    </MudPaper>
}
