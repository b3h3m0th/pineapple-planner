@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using PineapplePlanner.Application.Interfaces
@using PineapplePlanner.UI.Providers
@using PineapplePlanner.UI.Services

@inject ITaskRepository _taskRepository
@inject FirebaseAuthenticationService _authenticationService
@inject AuthenticationStateProvider _authStateProvider

@if (IsOpen)
{
    <MudPaper Elevation="25">
        <div class="task-detail">
            <div>
                <MudIconButton Icon=@Icons.Material.Rounded.Close OnClick=@HandleClose Color=@Color.Surface />
            </div>
            <MudForm Class="p-4">
                <MudTextField Label="Name" @bind-Value=@Task.Name Variant=@Variant.Outlined Color=@Color.Surface Margin=@Margin.Dense />
                <MudTextField T="string" Label="Description" @bind-Value=@Task.Description Variant="@Variant.Outlined" FullWidth="true" Lines="4" Margin=@Margin.Dense />
                <MudSelect T=@(Domain.Enums.Priority?) @bind-Value=@Task.Priority Label="Priority" Variant=@Variant.Outlined FullWidth="true" Margin=@Margin.Dense>
                    @foreach (Domain.Enums.Priority priority in Enum.GetValues(typeof(Domain.Enums.Priority)).Cast<Domain.Enums.Priority>())
                    {
                        <MudSelectItem T=@(Domain.Enums.Priority?) Value=@priority>@priority</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField T=@string
                              Label="Tags"
                              @bind-Value=@_addATag
                              Variant=@Variant.Outlined
                              Margin=@Margin.Dense
                              Immediate
                              OnKeyDown=@HandleAddATagKeyDown
                              Adornment=@Adornment.End
                              AdornmentIcon=@Icons.Material.Rounded.Add
                              OnAdornmentClick=@(() => HandleAddTag(_addATag)) />
                <div class="tags">
                    <MudChipSet T=@Domain.Entities.Tag
                                AllClosable
                                CheckMark=@true
                                OnClose=@HandleRemoveTag>
                        @foreach (Domain.Entities.Tag tag in Task.Tags)
                        {
                            <MudChip T=@Domain.Entities.Tag Value=@tag Color=@Color.Default Label=@true>@tag.Name</MudChip>
                        }
                    </MudChipSet>
                </div>
                <MudTabs Centered Rounded Class="mt-4" @bind-ActivePanelIndex=@_activeTabIndex>
                    <MudTabPanel Text="Task" ID=@("task")>
                        <div class="datetime-row">
                            <div class="datetime-row-item">
                                <MudDatePicker Label="Due Date" @bind-Date=@Task.DateDue Variant=@Variant.Outlined Margin=@Margin.Dense Editable></MudDatePicker>
                            </div>
                            <div class="datetime-row-item">
                                @if (Task.DateDue != null)
                                {
                                    <MudTimePicker Label="Time" @bind-Time=@DueTimeSpan Variant=@Variant.Outlined Margin=@Margin.Dense Editable />
                                }
                            </div>
                        </div>
                        <MudCheckBox @bind-Value="IsCompleted" Label="Completed" Color=@Color.Surface T="bool" Class="mt-1" />
                    </MudTabPanel>
                    <MudTabPanel Text="Event" ID=@("event")>
                        <div class="datetime-row">
                            <div class="datetime-row-item">
                                <MudDatePicker Label="Start" @bind-Date=@Task.StartDate Variant=@Variant.Outlined Margin=@Margin.Dense Editable></MudDatePicker>
                            </div>
                            <div class="datetime-row-item">
                                @if (Task.StartDate != null)
                                {
                                    <MudTimePicker Label="Time" @bind-Time=@StartDateTimeSpan Variant=@Variant.Outlined Margin=@Margin.Dense Editable />
                                }
                            </div>
                        </div>
                        <div class="datetime-row">
                            <div class="datetime-row-item">
                                <MudDatePicker Label="End" @bind-Date=@Task.EndDate Variant=@Variant.Outlined Margin=@Margin.Dense Editable></MudDatePicker>
                            </div>
                            <div class="datetime-row-item">
                                @if (Task.EndDate != null)
                                {
                                    <MudTimePicker Label="Time" @bind-Time=@EndDateTimeSpan Variant=@Variant.Outlined Margin=@Margin.Dense Editable />
                                }
                            </div>
                        </div>
                    </MudTabPanel>
                </MudTabs>
                <MudDivider Class="my-4" />
                <div class="task-actions">
                    <MudButton OnClick=@HandleSave Color=@Color.Surface Variant=@Variant.Outlined>Save</MudButton>

                    @if (!string.IsNullOrEmpty(Task.Id))
                    {
                        <MudButton OnClick=@HandleDelete Color=@Color.Error Variant=@Variant.Outlined>Delete</MudButton>
                    }
                </div>
            </MudForm>
        </div>
    </MudPaper>
}
