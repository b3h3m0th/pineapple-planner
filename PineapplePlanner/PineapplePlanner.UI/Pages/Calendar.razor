@using Microsoft.AspNetCore.Authorization
@using System.Globalization
@using Microsoft.AspNetCore.Components.Authorization
@using PineapplePlanner.Application.Interfaces

@page "/calendar"

@inject IEntryRepository _taskRepository
@inject AuthenticationStateProvider _authStateProvider

@attribute [Authorize]

@if (_eventsResult.Data != null)
{
    <MudPaper Class="pa-4 ma-2" Elevation="25" Style="width: 100%;">
        <div class="calendar-view">
            <div class="time-column">
                <div class="column-header"></div>
                @for (int hour = 0; hour < 24; hour++)
                {
                    DateTime hours = new DateTime().AddHours(hour);
                    string text = hours.ToString("HH:mm");

                    <div class="time-cell">
                        <MudText Typo=@Typo.caption>
                            @text
                        </MudText>
                    </div>
                }
            </div>
            <div class="calendar-grid">
                @for (int day = 0; day < 7; day++)
                {
                    var dayName = _dayNames[day];
                    DateTime firstDateWeek = FirstDate.AddDays(-(int)(FirstDate.DayOfWeek - new CultureInfo("en").DateTimeFormat.FirstDayOfWeek + 7) % 7);
                    DateTime currentDate = firstDateWeek.AddDays(day).Date;

                    <div class="day-column">
                        <div class="column-header">
                            <MudText Typo=@Typo.caption>
                                @dayName, @currentDate.Day
                            </MudText>
                        </div>
                        <div class="column-body">
                            @for (int hour = 0; hour < 24; hour++)
                            {
                                DateTime hourDate = currentDate.AddHours(hour);

                                <div class="day-cell" @onclick=@(() => HandleCreateTask(hourDate))>
                                    @if (_eventsResult.Data?.Any() == true)
                                    {
                                        @if (_eventsResult.Data.Any(t => t.StartDate != null && t.EndDate != null && TaskOverlapsHour(t, hourDate)))
                                        {
                                            <div class="day-cell-event-filler"></div>
                                        }
                                    }
                                </div>
                            }
                            <div class="column-body__events">
                                @if (_eventsResult.Data?.Any() == true)
                                {
                                    @foreach (Domain.Entities.Event eventEntry in _eventsResult.Data.Where(t => t.StartDate != null && t.EndDate != null))
                                    {
                                        @if (TaskOverlapsDay(eventEntry, currentDate))
                                        {
                                            <div class="calendar-event" style="@GetTaskStyle(eventEntry, currentDate)"
                                                 title=@eventEntry.Name
                                                 @onclick:stopPropagation=@true
                                                 @onclick=@(() => HandleEditTask(eventEntry))>
                                                <MudText Typo=@Typo.caption>
                                                    @eventEntry.Name
                                                </MudText>
                                            </div>
                                        }
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </MudPaper>
}
else if (_eventsResult.Errors.Any())
{
    @foreach (string error in _eventsResult.Errors)
    {
        <div>@error</div>
    }
}
else
{
    <MudProgressLinear Color=@Color.Primary Indeterminate />
}
