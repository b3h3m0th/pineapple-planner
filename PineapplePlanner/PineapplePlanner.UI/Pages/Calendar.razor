@using Microsoft.AspNetCore.Authorization
@using System.Globalization
@using Microsoft.AspNetCore.Components.Authorization
@using PineapplePlanner.Application.Interfaces
@using PineapplePlanner.UI.Services

@page "/calendar"

@inject IEntryRepository _taskRepository
@inject AuthenticationStateProvider _authStateProvider
@inject LocalizationService _localize

@attribute [Authorize]

@if (_eventsResult.Data != null)
{
    <MudPaper Class="ma-2" Elevation="25" Style="width: 100%;">
        <div class="calendar">
            <div class="header">
                <div class="navigation">
                    <MudIconButton Icon=@Icons.Material.Rounded.ArrowBackIos OnClick=@(() => HandleNavigateToWeek(FirstDate.AddDays(-7))) Color=@Color.Surface Size=@Size.Small />
                    <MudIconButton Icon=@Icons.Material.Rounded.ArrowForwardIos OnClick=@(() => HandleNavigateToWeek(FirstDate.AddDays(7))) Color=@Color.Surface Size=@Size.Small />
                </div>
                <MudText Typo=@Typo.h6>
                    @_localize["Week"] @ISOWeek.GetWeekOfYear(FirstDate)
                </MudText>
            </div>
            <div class="calendar-view">
                <div class="time-column">
                    <div class="column-header"></div>
                    @for (int hour = 0; hour < 24; hour++)
                    {
                        DateTime hours = new DateTime().AddHours(hour);
                        string text = hours.ToString("HH:mm");

                        <div class="time-cell">
                            <MudText Typo=@Typo.caption>
                                @text
                            </MudText>
                        </div>
                    }
                </div>
                <div class="calendar-grid">
                    @for (int day = 0; day < 7; day++)
                    {
<<<<<<< HEAD
                        string dayName = _dayNames[day];
=======
                        string dayName = CultureInfo.GetCultureInfo(_localize.CurrentCulture).DateTimeFormat.GetDayName((DayOfWeek)day);
>>>>>>> 03eb249b61799026dff86e5ee3066aefb6307708
                        DateTime firstDateWeek = FirstDate.AddDays(-(int)(FirstDate.DayOfWeek - new CultureInfo(_localize.CurrentCulture).DateTimeFormat.FirstDayOfWeek + 7) % 7);
                        DateTime currentDate = firstDateWeek.AddDays(day).Date;

                        <div class="day-column">
                            <div class="column-header">
                                <MudText Typo=@Typo.caption>
                                    @dayName, @currentDate.Day
                                </MudText>
                            </div>
                            <div class="column-body">
                                @for (int hour = 0; hour < 24; hour++)
                                {
                                    DateTime hourDate = currentDate.AddHours(hour);

                                    <div class="day-cell" @onclick=@(() => HandleCreateTask(hourDate))>
                                        @if (_eventsResult.Data?.Any() == true)
                                        {
                                            @if (_eventsResult.Data.Any(t => t.StartDate != null && t.EndDate != null && TaskOverlapsHour(t, hourDate)))
                                            {
                                                <div class="day-cell-event-filler"></div>
                                            }
                                        }
                                    </div>
                                }
                                <div class="column-body__events">
                                    @if (_eventsResult.Data?.Any() == true)
                                    {
                                        @foreach (Domain.Entities.Event eventEntry in _eventsResult.Data.Where(t => t.StartDate != null && t.EndDate != null))
                                        {
                                            @if (TaskOverlapsDay(eventEntry, currentDate))
                                            {
                                                <div class="calendar-event" style="@GetTaskStyle(eventEntry, currentDate)"
                                                     title=@eventEntry.Name
                                                     @onclick:stopPropagation=@true
                                                     @onclick=@(() => HandleEditTask(eventEntry))>
                                                    <MudText Typo=@Typo.caption>
                                                        @_localize[eventEntry.Name]
                                                    </MudText>
                                                </div>
                                            }
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </MudPaper>
}
else if (_eventsResult.Errors.Any())
{
    @foreach (string error in _eventsResult.Errors)
    {
        <div>@_localize[error]</div>
    }
}
else
{
    <MudProgressLinear Color=@Color.Primary Indeterminate />
}
